#include "imports/stdlib.fc";

;; Написать СК, который принимает от пользователей ТОНы (op::accept_funds)
;; и сохраняет их на балансе. Если пользователь отправил меньше 2 ТОН, то вернуть ему их.
;; Иначе сохранить на балансе. Админ сможет вывести ТОНы себе (op::admin_withdraw),
;; (не все, на контракте должно всегда быть минимум 0.5 ТОН). Протестировать контракт

global int min_accept;
global int min_store;
global slice admin_address;

const op::accept_funds = 0xA4D8086F;
const op::admin_withdraw = 0x217E5898;

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    min_accept = ds~load_coins();
    min_store = ds~load_coins();
    admin_address = ds~load_msg_addr();
    ds.end_parse();
}

() send_empty_message(int amount, slice to, int mode) impure inline_ref {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(0, 107)
        .end_cell();
    send_raw_message(msg, mode);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_data_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    load_data();

    if (op == op::accept_funds) {
        throw_unless(100,msg_value >= min_accept);
        return();
    }

    if (op == op::admin_withdraw) {
        throw_unless(101, equal_slices(sender, admin_address));
        throw_unless(102, my_balance >= min_store);
        throw_unless(103, my_balance - min_store >= min_store);
        send_empty_message(my_balance - min_store, admin_address, 0);
        return();
    }

    throw(0xffff);
}